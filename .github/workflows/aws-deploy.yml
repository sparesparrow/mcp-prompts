name: AWS Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build project
      run: pnpm run build

    - name: Deploy to AWS
      run: ./scripts/deploy-aws-enhanced.sh
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_PROFILE: default
        ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

    - name: Run health check
      run: |
        sleep 30
        ./scripts/health-check-aws.sh

    - name: Run smoke tests
      run: |
        # Get API URL from CloudFormation outputs
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name McpPromptsStack \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text)
        
        # Test health endpoint
        curl -f "$API_URL/health" || exit 1
        
        # Test prompts endpoint
        curl -f "$API_URL/v1/prompts" || exit 1
        
        echo "✅ Smoke tests passed"

    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed"
          exit 1
        fi
