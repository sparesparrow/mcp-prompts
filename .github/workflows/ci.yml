name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mcp_prompts_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration
        env:
          PG_HOST: localhost
          PG_PORT: 5432
          PG_DATABASE: mcp_prompts_test
          PG_USER: postgres
          PG_PASSWORD: postgres
          PG_SSL: false

      - name: Run build test
        run: npm run test:build

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/

  rust-build-and-test:
    name: Build and Test (Rust)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build mcp-prompts-rs
        run: cargo build --verbose
        working-directory: ./mcp-prompts-rs
      - name: Test mcp-prompts-rs
        run: cargo test --verbose
        working-directory: ./mcp-prompts-rs

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: [build-and-test, rust-build-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Docker tests
        run: npm run test:docker

      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-results
          path: test-results/

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-tests, rust-build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Determine version bump
        id: bump
        run: |
          LATEST_COMMIT=$(git log -1 --pretty=format:%s)
          if [[ "$LATEST_COMMIT" == *"BREAKING CHANGE"* || "$LATEST_COMMIT" == *"!:"* ]]; then
            echo "VERSION_TYPE=major" >> $GITHUB_OUTPUT
          elif [[ "$LATEST_COMMIT" == *"feat:"* ]]; then
            echo "VERSION_TYPE=minor" >> $GITHUB_OUTPUT
          else
            echo "VERSION_TYPE=patch" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        run: npx --no-install ./scripts/release.sh --version ${{ steps.bump.outputs.VERSION_TYPE }} --publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            sparesparrow/mcp-prompts:latest
            sparesparrow/mcp-prompts:${{ steps.bump.outputs.VERSION_TYPE }}
