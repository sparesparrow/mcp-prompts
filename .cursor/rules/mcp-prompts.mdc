---
description: Guidelines for developing a streamlined prompt manager using MCP architecture patterns
globs:
  - "src/**/*.ts"
  - "src/**/*.js"
  - "src/**/*.json"
  - "*.md"
  - "Dockerfile"
  - "docker-compose.yml"
---

# MCP-Prompts Project Guidelines

## Project Overview

MCP-Prompts provides a focused, efficient prompt management system built on MCP server standards. The project follows a modular architecture pattern with clear separation of concerns and leverages existing MCP servers rather than reimplementing functionality.

## Core Architecture Principles

### 1. Minimalist Implementation

Follow these principles for a streamlined codebase:
- Implement only what's necessary to achieve core functionality
- Reuse existing MCP servers and clients wherever possible
- Maintain a flat, consistent file structure
- Limit the number of dependencies

### 2. Layered Architecture

Organize the codebase into clear layers:

```
src/
  ├── core/              # Core domain models and business logic
  ├── adapters/          # Integrations with MCP servers
  ├── services/          # Business services orchestrating functionality
  ├── tools/             # MCP Tool implementations
  ├── resources/         # MCP Resource implementations
  ├── utils/             # Shared utilities
  └── index.ts           # Main entry point
```

### 3. Unified Type System

Maintain a single source of truth for type definitions:

```typescript
// src/core/types.ts - Single location for all type definitions
export interface Prompt {
  id: string;
  name: string;
  description?: string;
  content: string;
  isTemplate: boolean;
  variables?: string[];
  tags?: string[];
  category?: string;
  createdAt: string;
  updatedAt: string;
  version: number;
  metadata?: Record<string, any>;
}

export interface TemplateVariables {
  [key: string]: string | number | boolean;
}

export interface ListPromptsOptions {
  tag?: string;
  isTemplate?: boolean;
  category?: string;
  search?: string;
  sort?: string;
  order?: 'asc' | 'desc';
  limit?: number;
  offset?: number;
}

export interface ApplyTemplateResult {
  content: string;
  originalPrompt: Prompt;
  appliedVariables: TemplateVariables;
  missingVariables?: string[];
}

// Additional types as needed...
```

### 4. Adapter Pattern for MCP Integration

Use a consistent adapter approach for all MCP server integrations:

```typescript
// src/adapters/base-adapter.ts
export interface MCPAdapter<T> {
  connect(): Promise<void>;
  disconnect(): Promise<void>;
  isConnected(): boolean;
  // Type-specific methods defined in derived interfaces
}

// src/adapters/storage-adapter.ts
export interface StorageAdapter extends MCPAdapter<Prompt> {
  getPrompt(id: string): Promise<Prompt>;
  savePrompt(prompt: Prompt): Promise<void>;
  listPrompts(options?: ListPromptsOptions): Promise<Prompt[]>;
  deletePrompt(id: string): Promise<void>;
}

// Implementation example
export class FilesystemAdapter implements StorageAdapter {
  // Implementation details...
}
```

## Implementation Guidelines

### 1. MCP Tool Implementation

Implement MCP tools following this pattern:

```typescript
// src/tools/prompt-tools.ts
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { z } from "zod";

export function setupPromptTools(server: Server, promptService: PromptService) {
  // Add prompt
  server.tool(
    "add_prompt",
    {
      prompt: z.object({
        name: z.string(),
        description: z.string().optional(),
        content: z.string(),
        isTemplate: z.boolean().default(false),
        tags: z.array(z.string()).optional(),
        category: z.string().optional()
      })
    },
    async ({ prompt }) => {
      try {
        const result = await promptService.addPrompt(prompt);
        return {
          content: [{ 
            type: "text", 
            text: `Prompt added successfully with ID: ${result.id}` 
          }]
        };
      } catch (error) {
        return {
          isError: true,
          content: [{ 
            type: "text", 
            text: `Error adding prompt: ${error.message}` 
          }]
        };
      }
    }
  );

  // Get prompt
  server.tool(
    "get_prompt",
    {
      id: z.string()
    },
    async ({ id }) => {
      try {
        const prompt = await promptService.getPrompt(id);
        return {
          content: [{ 
            type: "text", 
            text: JSON.stringify(prompt, null, 2) 
          }]
        };
      } catch (error) {
        return {
          isError: true,
          content: [{ 
            type: "text", 
            text: `Error retrieving prompt: ${error.message}` 
          }]
        };
      }
    }
  );

  // Additional tools (list_prompts, apply_template, etc.)...
}
```

### 2. Resource Implementation

Implement MCP resources following this pattern:

```typescript
// src/resources/prompt-resources.ts
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { ResourceTemplate } from "@modelcontextprotocol/sdk/server/resources.js";

export function setupPromptResources(server: Server, promptService: PromptService) {
  // Define prompt resource
  server.resource(
    "prompt",
    new ResourceTemplate("prompt://{id}", { list: "prompt://" }),
    async (uri, { id }) => {
      const prompt = await promptService.getPrompt(id);
      return {
        contents: [{
          uri: uri.href,
          mimeType: "application/json",
          text: JSON.stringify(prompt, null, 2)
        }]
      };
    }
  );

  // Define templates resource
  server.resource(
    "templates",
    new ResourceTemplate("templates://", { list: undefined }),
    async (uri) => {
      const templates = await promptService.listPrompts({ isTemplate: true });
      return {
        contents: [{
          uri: uri.href,
          mimeType: "application/json",
          text: JSON.stringify(templates, null, 2)
        }]
      };
    }
  );

  // Additional resources as needed...
}
```

### 3. Utility Functions

Keep utility functions focused and minimal:

```typescript
// src/utils/template-utils.ts
import { Prompt, TemplateVariables, ApplyTemplateResult } from "../core/types";

export function applyTemplate(prompt: Prompt, variables: TemplateVariables): ApplyTemplateResult {
  if (!prompt.isTemplate) {
    return {
      content: prompt.content,
      originalPrompt: prompt,
      appliedVariables: {}
    };
  }
  
  // Extract variables from template
  const templateVariables = extractVariables(prompt.content);
  const missingVariables = templateVariables.filter(v => !variables[v]);
  
  // Apply substitution
  let content = prompt.content;
  for (const [key, value] of Object.entries(variables)) {
    const regex = new RegExp(`\\{\\{\\s*${key}\\s*\\}\\}`, 'g');
    content = content.replace(regex, String(value));
  }
  
  return {
    content,
    originalPrompt: prompt,
    appliedVariables: variables,
    missingVariables: missingVariables.length > 0 ? missingVariables : undefined
  };
}

export function extractVariables(content: string): string[] {
  const matches = content.match(/\{\{([^}]+)\}\}/g) || [];
  return matches
    .map(match => match.replace(/\{\{|\}\}/g, '').trim())
    .filter((v, i, a) => a.indexOf(v) === i); // Remove duplicates
}

// Additional focused utility functions as needed...
```

### 4. Main Server Setup

Implement a clean, straightforward server setup:

```typescript
// src/index.ts
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { PromptService } from "./services/prompt-service.js";
import { setupPromptTools } from "./tools/prompt-tools.js";
import { setupPromptResources } from "./resources/prompt-resources.js";
import { createStorageAdapter } from "./adapters/storage-adapter.js";

async function main() {
  try {
    // Initialize server
    const server = new Server({
      name: "mcp-prompts",
      version: "1.0.0"
    }, {
      capabilities: {
        resources: { subscribe: false },
        tools: { listChanged: false },
        prompts: { listChanged: false }
      }
    });

    // Initialize storage adapter based on configuration
    const storageAdapter = createStorageAdapter(process.env.STORAGE_TYPE || "file");
    await storageAdapter.connect();

    // Initialize service
    const promptService = new PromptService(storageAdapter);

    // Set up tools and resources
    setupPromptTools(server, promptService);
    setupPromptResources(server, promptService);

    // Start server
    const transport = new StdioServerTransport();
    await server.connect(transport);
    
    console.error("MCP Prompts server started");
  } catch (error) {
    console.error("Failed to start server:", error);
    process.exit(1);
  }
}

main();
```

## Docker Integration

Use a simple Docker setup focused on the core functionality:

```dockerfile
# Dockerfile
FROM node:18-alpine AS build

WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY tsconfig.json ./
COPY src ./src
RUN npm run build

FROM node:18-alpine
WORKDIR /app
COPY --from=build /app/package*.json ./
COPY --from=build /app/build ./build
RUN npm ci --omit=dev
RUN mkdir -p /app/prompts

ENV NODE_ENV=production
ENV STORAGE_TYPE=file
ENV PROMPTS_DIR=/app/prompts

ENTRYPOINT ["node", "build/index.js"]
```

```yaml
# docker-compose.yml
version: '3.8'

services:
  mcp-prompts:
    build: .
    volumes:
      - ./prompts:/app/prompts
    environment:
      - STORAGE_TYPE=file
      - PROMPTS_DIR=/app/prompts
    stdin_open: true
    tty: true
```

## Testing Approach

Implement a focused testing strategy:

```typescript
// src/tests/prompt-service.test.ts
import { PromptService } from '../services/prompt-service';
import { MockStorageAdapter } from './mocks/mock-storage-adapter';

describe('PromptService', () => {
  let service: PromptService;
  let mockAdapter: MockStorageAdapter;

  beforeEach(() => {
    mockAdapter = new MockStorageAdapter();
    service = new PromptService(mockAdapter);
  });

  test('should get prompt by id', async () => {
    const testPrompt = {
      id: 'test-1',
      name: 'Test Prompt',
      content: 'Test content',
      isTemplate: false,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      version: 1
    };
    
    mockAdapter.getPrompt.mockResolvedValue(testPrompt);
    
    const result = await service.getPrompt('test-1');
    expect(result).toEqual(testPrompt);
    expect(mockAdapter.getPrompt).toHaveBeenCalledWith('test-1');
  });

  // Additional tests...
});
```

## Claude Desktop Integration

Create a simple integration with Claude Desktop:

```json
// claude_desktop_config.json
{
  "mcpServers": {
    "mcp-prompts": {
      "command": "node",
      "args": ["/path/to/mcp-prompts/build/index.js"],
      "env": {
        "STORAGE_TYPE": "file",
        "PROMPTS_DIR": "/path/to/prompts"
      }
    }
  }
}
```

## Best Practices

1. **Keep it Simple**: Implement the minimal functionality needed to meet requirements
2. **Consistent Naming**: Use clear, consistent naming conventions across the codebase
3. **Focused Modules**: Each module should have a single responsibility
4. **Leverage Existing Tools**: Use existing MCP servers instead of reimplementing functionality
5. **Error Handling**: Implement comprehensive error handling for a robust user experience
6. **Documentation**: Document all public interfaces and configuration options
7. **Testing**: Write tests for core functionality to ensure reliability
8. **Type Safety**: Use TypeScript's type system to prevent errors
9. **Minimal Dependencies**: Keep external dependencies to a minimum