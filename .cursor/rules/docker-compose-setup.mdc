---
description: Streamlined Docker Compose setup for MCP-Prompts
globs:
  - "Dockerfile"
  - "docker-compose.yml"
  - "docker-compose.*.yml"
---

# Docker Compose Setup for MCP-Prompts

This rule provides guidelines for a simplified Docker Compose setup that focuses on core functionality while enabling optional integrations.

## Core Principles

1. **Simplicity First**: Start with a minimal setup that covers core functionality
2. **Modular Composition**: Use separate compose files for optional components
3. **Environment Configuration**: Use environment variables for flexible configuration
4. **Focused Services**: Each service should have a clear, single responsibility
5. **Portability**: Ensure configurations work across different environments
6. **Resource Management**: Properly manage shared resources and dependencies
7. **Security**: Implement appropriate security measures for production deployments

## Base Docker Compose File

```yaml
# docker-compose.yml
version: '3.8'

services:
  # Core prompt manager service
  mcp-prompts:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - ${PROMPTS_PATH:-./prompts}:/app/prompts
      - mcp-data:/app/data
    environment:
      - NODE_ENV=production
      - STORAGE_TYPE=file
      - PROMPTS_DIR=/app/prompts
    stdin_open: true  # Required for stdio transport
    tty: true         # Keep container running
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  mcp-data:
    name: ${VOLUME_PREFIX:-mcp}-data
```

## Extended Functionality Compose File

```yaml
# docker-compose.extended.yml
version: '3.8'

services:
  # Core service with additional configuration
  mcp-prompts:
    environment:
      - STORAGE_TYPE=${STORAGE_TYPE:-file}
      - MEMORY_SERVER_URL=http://memory-server:3000
      - FILESYSTEM_SERVER_URL=http://filesystem-server:3000
      - GITHUB_SERVER_URL=http://github-server:3000
    depends_on:
      memory-server:
        condition: service_healthy
      filesystem-server:
        condition: service_healthy
      github-server:
        condition: service_healthy

  # Memory MCP server for metadata
  memory-server:
    image: ${REGISTRY:-ghcr.io/modelcontextprotocol}/server-memory:${MEMORY_VERSION:-latest}
    volumes:
      - ${MEMORY_DATA_PATH:-./data}:/data
    environment:
      - NODE_ENV=production
      - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    stdin_open: true

  # Filesystem MCP server for accessing prompt files
  filesystem-server:
    image: ${REGISTRY:-ghcr.io/modelcontextprotocol}/server-filesystem:${FILESYSTEM_VERSION:-latest}
    volumes:
      - ${PROMPTS_PATH:-./prompts}:/prompts:ro
    environment:
      - NODE_ENV=production
      - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
    command: /prompts
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    stdin_open: true

  # GitHub MCP server for synchronization
  github-server:
    image: ${REGISTRY:-ghcr.io/modelcontextprotocol}/server-github:${GITHUB_VERSION:-latest}
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN:-}
      - NODE_ENV=production
      - LOGGING_LEVEL=${LOGGING_LEVEL:-info}
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    stdin_open: true
```

## Database Support Compose File

```yaml
# docker-compose.postgres.yml
version: '3.8'

services:
  # Core service with postgres configuration
  mcp-prompts:
    environment:
      - STORAGE_TYPE=postgres
      - POSTGRES_CONNECTION_STRING=postgresql://${POSTGRES_USER:-mcp}:${POSTGRES_PASSWORD:-mcppass}@postgres:5432/${POSTGRES_DB:-prompts}
    depends_on:
      postgres:
        condition: service_healthy

  # Postgres database
  postgres:
    image: postgres:${POSTGRES_VERSION:-14}-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-mcp}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mcppass}
      - POSTGRES_DB=${POSTGRES_DB:-prompts}
    volumes:
      - ${VOLUME_PREFIX:-mcp}-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-mcp}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  mcp-postgres-data:
    name: ${VOLUME_PREFIX:-mcp}-postgres-data
```

## SSE Transport Compose File

```yaml
# docker-compose.sse.yml
version: '3.8'

services:
  # Core service with SSE transport configuration
  mcp-prompts:
    ports:
      - "${HOST_PORT:-3000}:3000"
    environment:
      - TRANSPORT_TYPE=sse
      - SERVER_PORT=3000
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - AUTH_TYPE=${AUTH_TYPE:-none}
      - API_KEY=${API_KEY:-}
    command: node build/sse.js
    stdin_open: false
    tty: false

  # Nginx for SSL termination and proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "${SSL_PORT:-443}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - mcp-prompts
```

## Development Environment Compose File

```yaml
# docker-compose.dev.yml
version: '3.8'

services:
  # Core service with development configuration
  mcp-prompts:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - ./src:/app/src
      - ./prompts:/app/prompts
      - ./data:/app/data
      - ./node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=true
    command: npm run dev
    ports:
      - "9229:9229" # Node.js debugger port

  # MCP Inspector for debugging
  mcp-inspector:
    image: node:18-alpine
    command: npx @modelcontextprotocol/inspector http://mcp-prompts:3000
    depends_on:
      - mcp-prompts
```

## Main Dockerfile

```dockerfile
# Dockerfile
FROM node:18-alpine AS build

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm ci

# Copy and build source
COPY tsconfig.json ./
COPY src ./src
RUN npm run build

# Production image
FROM node:18-alpine

WORKDIR /app

# Copy package files and build output
COPY --from=build /app/package*.json ./
COPY --from=build /app/build ./build

# Install production dependencies
RUN npm ci --omit=dev

# Create directories
RUN mkdir -p /app/prompts /app/data

# Use non-root user for security
USER node

# Set metadata
LABEL org.opencontainers.image.source="https://github.com/your-org/mcp-prompts"
LABEL org.opencontainers.image.description="MCP Prompt Manager Server"
LABEL org.opencontainers.image.licenses="MIT"

# Start server
CMD ["node", "build/index.js"]
```

## Usage Examples

### Basic Setup

For basic usage with just the core functionality:

```bash
# Start the basic service
docker-compose up -d
```

### Extended Setup

For using extended functionality with additional MCP servers:

```bash
# Start with extended services
docker-compose -f docker-compose.yml -f docker-compose.extended.yml up -d
```

### PostgreSQL Setup

For using PostgreSQL as the storage backend:

```bash
# Start with PostgreSQL support
docker-compose -f docker-compose.yml -f docker-compose.postgres.yml up -d
```

### SSE Transport Setup

For using SSE transport instead of stdio:

```bash
# Start with SSE transport
docker-compose -f docker-compose.yml -f docker-compose.sse.yml up -d
```

### Development Setup

For development with hot-reload and debugging tools:

```bash
# Start development environment
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
```

### Combined Setup

For a complete setup with all components:

```bash
# Start with all components
docker-compose -f docker-compose.yml -f docker-compose.extended.yml -f docker-compose.postgres.yml -f docker-compose.sse.yml up -d
```

## Environment Variable Management

Create a `.env` file to manage environment variables:

```ini
# Core Configuration
NODE_ENV=production
LOGGING_LEVEL=info
TRANSPORT_TYPE=stdio
VOLUME_PREFIX=mcp

# Paths
PROMPTS_PATH=./prompts

# SSE Transport (if used)
HOST_PORT=3000
ALLOWED_ORIGINS=*
AUTH_TYPE=none
API_KEY=

# Registry Configuration
REGISTRY=ghcr.io/modelcontextprotocol
MEMORY_VERSION=latest
FILESYSTEM_VERSION=latest
GITHUB_VERSION=latest

# PostgreSQL Configuration (if used)
POSTGRES_VERSION=14
POSTGRES_USER=mcp
POSTGRES_PASSWORD=mcppass
POSTGRES_DB=prompts
```

## Claude Desktop Integration

To integrate with Claude Desktop:

```json
{
  "mcpServers": {
    "mcp-prompts-stdio": {
      "command": "docker",
      "args": ["compose", "-f", "${CONFIG_DIR}/docker-compose.yml", "run", "--rm", "-i", "mcp-prompts"],
      "env": {
        "PROMPTS_PATH": "${USER_HOME}/mcp/prompts"
      }
    },
    "mcp-prompts-sse": {
      "command": "curl",
      "args": ["-X", "POST", "http://localhost:3000/connect"]
    }
  }
}
```

## Multi-Environment Deployment

For deploying across multiple environments:

```bash
# Development
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# Testing
docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d

# Staging
docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d

# Production
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```

## Best Practices

1. **Environment Variables**: Use environment variables for configuration
2. **Volume Naming**: Use consistent volume naming with environment-specific prefixes
3. **Container Security**: Run containers as non-root users
4. **Health Checks**: Implement health checks for all services
5. **Dependency Management**: Use service dependencies with health checks
6. **Resource Limits**: Set resource limits for production deployments
7. **Logging**: Configure appropriate logging levels and formats
8. **Documentation**: Document all configuration options
9. **Version Pinning**: Pin specific versions for production stability
10. **Backup Strategy**: Implement volume backup procedures
11. **Cross-Platform Compatibility**: Ensure paths work on all platforms
12. **Secret Management**: Use Docker secrets or external vault services for sensitive data