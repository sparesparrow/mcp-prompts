---
description: Streamlined Docker Compose setup for MCP-Prompts
globs:
  - "Dockerfile"
  - "docker-compose.yml"
  - "docker-compose.*.yml"
---

# Docker Compose Setup for MCP-Prompts

This rule provides guidelines for a simplified Docker Compose setup that focuses on core functionality while enabling optional integrations.

## Core Principles

1. **Simplicity First**: Start with a minimal setup that covers core functionality
2. **Modular Composition**: Use separate compose files for optional components
3. **Environment Configuration**: Use environment variables for flexible configuration
4. **Focused Services**: Each service should have a clear, single responsibility

## Base Docker Compose File

```yaml
# docker-compose.yml
version: '3.8'

services:
  # Core prompt manager service
  mcp-prompts:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./prompts:/app/prompts
    environment:
      - NODE_ENV=production
      - STORAGE_TYPE=file
      - PROMPTS_DIR=/app/prompts
    stdin_open: true  # Required for stdio transport
    tty: true         # Keep container running
```

## Extended Functionality Compose File

```yaml
# docker-compose.extended.yml
version: '3.8'

services:
  # Core service with additional configuration
  mcp-prompts:
    environment:
      - STORAGE_TYPE=${STORAGE_TYPE:-file}
      - MEMORY_SERVER_URL=http://memory-server:3000
      - FILESYSTEM_SERVER_URL=http://filesystem-server:3000
      - GITHUB_SERVER_URL=http://github-server:3000
    depends_on:
      - memory-server
      - filesystem-server
      - github-server

  # Memory MCP server for metadata
  memory-server:
    image: node:18-alpine
    command: npx -y @modelcontextprotocol/server-memory
    volumes:
      - ./data:/data
    environment:
      - NODE_ENV=production

  # Filesystem MCP server for accessing prompt files
  filesystem-server:
    image: node:18-alpine
    command: npx -y @modelcontextprotocol/server-filesystem /prompts
    volumes:
      - ./prompts:/prompts
    environment:
      - NODE_ENV=production

  # GitHub MCP server for synchronization
  github-server:
    image: node:18-alpine
    command: npx -y @modelcontextprotocol/server-github
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN:-}
      - NODE_ENV=production
```

## Database Support Compose File

```yaml
# docker-compose.postgres.yml
version: '3.8'

services:
  # Core service with postgres configuration
  mcp-prompts:
    environment:
      - STORAGE_TYPE=postgres
      - POSTGRES_CONNECTION_STRING=postgresql://${POSTGRES_USER:-mcp}:${POSTGRES_PASSWORD:-mcppass}@postgres:5432/${POSTGRES_DB:-prompts}
    depends_on:
      - postgres

  # Postgres database
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-mcp}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mcppass}
      - POSTGRES_DB=${POSTGRES_DB:-prompts}
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  postgres-data:
```

## Development Environment Compose File

```yaml
# docker-compose.dev.yml
version: '3.8'

services:
  # Core service with development configuration
  mcp-prompts:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - ./src:/app/src
      - ./prompts:/app/prompts
      - ./data:/app/data
    environment:
      - NODE_ENV=development
    command: npm run dev

  # MCP Inspector for debugging
  mcp-inspector:
    image: node:18-alpine
    command: npx @modelcontextprotocol/inspector http://mcp-prompts:3000
    depends_on:
      - mcp-prompts
```

## Main Dockerfile

```dockerfile
# Dockerfile
FROM node:18-alpine AS build

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm ci

# Copy and build source
COPY tsconfig.json ./
COPY src ./src
RUN npm run build

# Production image
FROM node:18-alpine

WORKDIR /app

# Copy package files and build output
COPY --from=build /app/package*.json ./
COPY --from=build /app/build ./build

# Install production dependencies
RUN npm ci --omit=dev

# Create prompt directory
RUN mkdir -p /app/prompts

# Use non-root user for security
USER node

# Start server
CMD ["node", "build/index.js"]
```

## Development Dockerfile

```dockerfile
# Dockerfile.dev
FROM node:18-alpine

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm install

# Copy config files
COPY tsconfig.json ./

# Create required directories
RUN mkdir -p /app/prompts /app/data

# Use non-root user for security
USER node

# Start in development mode
CMD ["npm", "run", "dev"]
```

## Usage Examples

### Basic Setup

For basic usage with just the core functionality:

```bash
# Start the basic service
docker-compose up -d
```

### Extended Setup

For using extended functionality with additional MCP servers:

```bash
# Start with extended services
docker-compose -f docker-compose.yml -f docker-compose.extended.yml up -d
```

### PostgreSQL Setup

For using PostgreSQL as the storage backend:

```bash
# Start with PostgreSQL support
docker-compose -f docker-compose.yml -f docker-compose.postgres.yml up -d
```

### Development Setup

For development with hot-reload and debugging tools:

```bash
# Start development environment
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
```

### Combined Setup

For a complete setup with all components:

```bash
# Start with all components
docker-compose -f docker-compose.yml -f docker-compose.extended.yml -f docker-compose.postgres.yml up -d
```

## Setup Script

```bash
#!/bin/bash
# setup.sh

# Exit on error
set -e

# Create required directories
mkdir -p ./prompts ./data

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
  cat > .env << EOF
# Storage configuration
STORAGE_TYPE=file
PROMPTS_DIR=./prompts

# PostgreSQL configuration (optional)
POSTGRES_USER=mcp
POSTGRES_PASSWORD=mcppass
POSTGRES_DB=prompts

# GitHub configuration (optional)
GITHUB_TOKEN=
EOF

  echo "Created .env file. Please update it with your configuration."
fi

# Build the basic image
docker-compose build

echo "Setup complete. You can now run 'docker-compose up -d' to start the server."
```

## Claude Desktop Integration Script

```bash
#!/bin/bash
# claude-setup.sh

# Determine config directory based on OS
if [[ "$OSTYPE" == "darwin"* ]]; then
  CONFIG_DIR="$HOME/Library/Application Support/Claude"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
  CONFIG_DIR="$HOME/.config/Claude"
elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin"* ]]; then
  CONFIG_DIR="$APPDATA/Claude"
else
  echo "Unsupported OS: $OSTYPE"
  exit 1
fi

CONFIG_FILE="$CONFIG_DIR/claude_desktop_config.json"

# Create config directory if needed
mkdir -p "$CONFIG_DIR"

# Create or update config file
cat > "$CONFIG_FILE" << EOF
{
  "mcpServers": {
    "mcp-prompts": {
      "command": "docker",
      "args": ["compose", "-f", "$(pwd)/docker-compose.yml", "run", "--rm", "-i", "mcp-prompts"]
    }
  }
}
EOF

echo "Claude Desktop configured to use MCP-Prompts server."
echo "Please restart Claude Desktop to apply the changes."
```

## Best Practices

1. **Environment Variables**: Use environment variables for configuration
2. **Volume Mounting**: Mount volumes for persistent data
3. **Container Security**: Run containers as non-root users
4. **Isolation**: Keep services isolated and focused
5. **Dependency Management**: Clearly define service dependencies
6. **Resource Limits**: Set resource limits for production deployments
7. **Logging**: Configure appropriate logging
8. **Documentation**: Document all configuration options